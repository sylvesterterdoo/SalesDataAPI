/** 
 * File: SqlSalesDataRepository.cs
 */

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using SalesDataAPI.Dtos;
using SalesDataAPI.Models;
using Newtonsoft.Json;

namespace SalesDataAPI.Data
{
    public class SqlSalesDataRepository : ISalesDataRepository
    {
        private readonly SalesDataContext _context;

        public SqlSalesDataRepository(SalesDataContext context)
        {
            _context = context;
        }

        /** Create a new article */
        public void CreateArticle(Article article)
        {
            if (article == null)
            {
                throw new ArgumentNullException(nameof(article));
            }

            _context.Articles.Add(article);
        }

        /** Saves changes in the context */
        public bool SaveChanges()
        {
            return (_context.SaveChanges() >= 0);
        }

        /** Returns the article statistics between the start and end date */
        IEnumerable<ArticleStatsDto> ISalesDataRepository.GetArticlesStatistics(DateTime? start, DateTime? end)
        {
            var startDate = start?.Date.ToString("yyyy-MM-dd HH:mm:ss.fff");
            var endDate = end?.Date.ToString("yyyy-MM-dd HH:mm:ss.fff");

            string query = $"SELECT ArticleNumber, COUNT(ArticleNumber) as Count, SUM(SalesPrice) as Total FROM dbo.Articles as article " +
                            "WHERE  DateOfSale >= '{0}' and DateOfSale <= '{1}' " +
                            "GROUP BY ArticleNumber";

            var result = _context.ArticleStats.FromSqlRaw(
                            String.Format(query, startDate, endDate)).ToList();

            return result;
        }

        /** Returns the number of articles sold on the given date */
        public string GetNumberOfSoldArticlePerDay(DateTime? date)
        {
            var checkDate = date?.Date;
            var numberOfSoldArticles = _context.Articles
                                .Where(a => a.DateOfSale.Date == checkDate).Count();

            var result = new Dictionary<string, object>()
            {
                { "Number of sold articles", numberOfSoldArticles },
                { "Date", String.Format("{0:d/M/yyyy}", date) }
            };

            return JsonConvert.SerializeObject(result);
        }

        /** Returns the revenue generated by the sold article on the given date */
        public string GetTotalRevenuePerDay(DateTime? date)
        {
            var checkDate = date?.Date;
            var articles = _context.Articles.Where(a => a.DateOfSale.Date == checkDate).ToList();

            double total = 0;
            foreach (var article in articles)
            {
                total += article.SalesPrice;
            }

            var result = new Dictionary<string, object>()
            {
                { "Total Revenue", total },
                { "Date", String.Format("{0:d/M/yyyy}", date) }
            };

            return JsonConvert.SerializeObject(result);
        }

        /** Returns the article with the id */
        public Article GetArticleById(int id)
        {
            return _context.Articles.FirstOrDefault(a => a.Id == id);
        }

        /** Returns the list of all the saved articles */
        public IEnumerable<Article> GetAllArticles()
        {
            return _context.Articles.ToList();
        }

    }
}